services:
  client:
    image: skyface753/cronitor-client:latest
    build:
      context: client-react
      dockerfile: Dockerfile
    networks:
      - cronitor
    environment:
      TZ: Europe/Berlin
      NODE_ENV: production

  server:
    image: skyface753/cronitor-server:latest
    build:
      context: server
      dockerfile: Dockerfile
    ports:
      - '127.0.0.1:8000:8000'
    networks:
      - cronitor
    environment:
      TZ: Europe/Berlin
      APIKEY: ${APIKEY}
      DATABASE_URL: ${DATABASE_URL}
      NOTIFY_MAIL: ${NOTIFY_MAIL}
      NOTIFY_DISCORD: ${NOTIFY_DISCORD}
      NOTIFY_SLACK: ${NOTIFY_SLACK}
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL}
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_FROM: ${SMTP_FROM}
      SMTP_TO: ${SMTP_TO}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SHOW_DOCS: ${SHOW_DOCS}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./jobs.json:/jobs.json

  proxy:
    image: skyface753/cronitor-proxy:latest
    build:
      context: ./proxy
      dockerfile: Dockerfile
    networks:
      - cronitor
      - proxy
    restart: always
    environment:
      TZ: Europe/Berlin
    depends_on:
      - server
      - client
    labels:
      - 'traefik.enable=true' #<== Enable traefik
      - 'traefik.http.routers.cronitor-secured.rule=Host(`cronitor.skyface.de`)' #<== Set domain
      - 'traefik.http.routers.cronitor-secured.entrypoints=websecure' #<== Set entry point for HTTPS
      - 'traefik.http.routers.cronitor-secured.tls.certresolver=mytlschallenge' #<== Set certsresolvers for https
      - 'traefik.http.routers.cronitor-secured.middlewares=authelia'
      - 'traefik.http.routers.cronitor-secured.service=cronitor-service' #<== Set service
      - 'traefik.http.services.cronitor-service.loadbalancer.server.port=80' #<== Set port

  db:
    container_name: pg_container
    image: postgres
    restart: always
    networks:
      - cronitor
    environment:
      POSTGRES_USER: job_user
      POSTGRES_PASSWORD: job_password
      POSTGRES_DB: job_db # postgres_url: postgresql://job_user:job_password@db:5432/job_db
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-d', 'job_db', '-U', 'job_user']
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  proxy:
    external: true
  cronitor:
    driver: bridge
